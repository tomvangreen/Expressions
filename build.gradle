/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'atombrot' at '08.11.14 21:58' with Gradle 2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.7
version = '0.1.0-SNAPSHOT'



configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 10, 'minutes'
}

jar {
    from sourceSets.main.allSource
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                   'Implementation-Version': version
    }
}


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time


    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.11'
}

apply plugin: 'maven'




uploadArchives {
   repositories {  
        mavenDeployer {  
            pom.version = project.version
            pom.groupId = 'digitalmeat'
            pom.artifactId = 'expressions'
            repository(url: 'https://nexus.thobens.ch/nexus/content/repositories/digitalmeat-releases/') {  
                authentication(userName: mavenUser, password: mavenPassword)
            }  
            snapshotRepository(url: 'https://nexus.thobens.ch/nexus/content/repositories/digitalmeat-snapshots/') {
                authentication(userName: mavenUser, password: mavenPassword)
            }  
        }  
    } 
}

